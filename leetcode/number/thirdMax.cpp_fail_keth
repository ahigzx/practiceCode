#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdlib>
#include <climits>

using namespace std;

template <typename T>
class likeFunc
{
    public:
        likeFunc(const T& pos, const vector<int>& nums) : m_pos(pos), vec(nums){ };
        bool operator()(const T& num){
            return num < vec[m_pos];
        }
    private:
        T& m_pos;
        vector<int>& vec;
};

class Solution {

    public:
        int thirdMax(vector<int>& nums) {
            auto iter = unique(nums.begin(), nums.end());  //这个用法错，unique只是对相邻的元素进行判断，用unique之前需要进行排序
            nums.erase(iter, nums.end());
            long max = (long)INT_MIN - 1;
            int result;
            if(nums.size() < 3)
            {
                for(auto &x : nums)
                {
                    if(max < x)
                    {
                        max = x;
                    }
                }
                result = max;
            }
            else
            {
                result = findKthNum(nums, 0, nums.size()-1, 3);
            }
            return result;
        }

        int randOfRange(int begin, int end)
        {
            srand(time(0));
            return  rand() % (end - begin) + begin;
        }

        int findKthNum(vector<int>& nums, int start, int end, int k)
        {
            if(nums.size() == 0)
                return 0;
            
            int pos = randOfRange(start, end);
            auto lambda1 = [&pos, &nums](int mem)->bool{
                return mem > nums[pos];
            };

            auto iter = partition(nums.begin() + start, nums.begin() + end, lambda1);
            int index = iter - nums.begin();
            if(index + 1 == k) //前面有index个比它小的
            {
                return *iter;
            }
            else if(index + 1 < k)
            {
                start = index + 1;
                end = nums.size() - 1;
                return findKthNum(nums, start, end, k - index -1);
            }
            else
            {
                start = 0;
                end = index - 1;
                return findKthNum(nums, start, end, k);
            }
        }

};


int main(void)
{

}
